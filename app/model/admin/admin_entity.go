// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package admin

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table gf_admin.
type Entity struct {
    Id           uint   `orm:"id,primary"      json:"id"`           // ID           
    Username     string `orm:"username,unique" json:"username"`     // 用户名       
    Nickname     string `orm:"nickname"        json:"nickname"`     // 昵称         
    Password     string `orm:"password"        json:"password"`     // 密码         
    Salt         string `orm:"salt"            json:"salt"`         // 密码盐       
    Avatar       string `orm:"avatar"          json:"avatar"`       // 头像         
    Email        string `orm:"email"           json:"email"`        // 电子邮箱     
    Loginfailure uint   `orm:"loginfailure"    json:"loginfailure"` // 失败次数     
    Logintime    int    `orm:"logintime"       json:"logintime"`    // 登录时间     
    Loginip      string `orm:"loginip"         json:"loginip"`      // 登录IP       
    Createtime   int    `orm:"createtime"      json:"createtime"`   // 创建时间     
    Updatetime   int    `orm:"updatetime"      json:"updatetime"`   // 更新时间     
    Token        string `orm:"token"           json:"token"`        // Session标识  
    Status       string `orm:"status"          json:"status"`       // 状态         
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}