// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package apply

import (
	"database/sql"

	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table gf_apply.
type Entity struct {
	Id         uint   `orm:"id,primary"   json:"id"`           //
	Type       string `orm:"type"         json:"type"`         // 类型，friend:好友申请,group:群组申请
	FromUserId uint   `orm:"from_user_id" json:"from_user_id"` // 发起人
	ToUserId   uint   `orm:"to_user_id"   json:"to_user_id"`   // 接收人
	TargetId   uint   `orm:"target_id"    json:"target_id"`    // 目标ID，好友申请时为好友分组ID，群组申请时为群组ID
	Remark     string `orm:"remark"       json:"remark"`       // 验证信息
	State      uint   `orm:"state"        json:"state"`        // 状态,1:待处理,2:已同意,3:已拒绝,4:已忽略
	CreateTime uint   `orm:"create_time"  json:"create_time"`  // 创建时间
	HandleTime uint   `orm:"handle_time"  json:"handle_time"`  // 处理时间
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
