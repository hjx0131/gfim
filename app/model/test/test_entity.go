// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package test

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table gf_test.
type Entity struct {
    Id           uint        `orm:"id,primary"   json:"id"`           // ID                                                        
    AdminId      int         `orm:"admin_id"     json:"admin_id"`     // 管理员ID                                                  
    CategoryId   uint        `orm:"category_id"  json:"category_id"`  // 分类ID(单选)                                              
    CategoryIds  string      `orm:"category_ids" json:"category_ids"` // 分类ID(多选)                                              
    Week         string      `orm:"week"         json:"week"`         // 星期(单选):monday=星期一,tuesday=星期二,wednesday=星期三  
    Flag         string      `orm:"flag"         json:"flag"`         // 标志(多选):hot=热门,index=首页,recommend=推荐             
    Genderdata   string      `orm:"genderdata"   json:"genderdata"`   // 性别(单选):male=男,female=女                              
    Hobbydata    string      `orm:"hobbydata"    json:"hobbydata"`    // 爱好(多选):music=音乐,reading=读书,swimming=游泳          
    Title        string      `orm:"title"        json:"title"`        // 标题                                                      
    Content      string      `orm:"content"      json:"content"`      // 内容                                                      
    Image        string      `orm:"image"        json:"image"`        // 图片                                                      
    Images       string      `orm:"images"       json:"images"`       // 图片组                                                    
    Attachfile   string      `orm:"attachfile"   json:"attachfile"`   // 附件                                                      
    Keywords     string      `orm:"keywords"     json:"keywords"`     // 关键字                                                    
    Description  string      `orm:"description"  json:"description"`  // 描述                                                      
    City         string      `orm:"city"         json:"city"`         // 省市                                                      
    Json         string      `orm:"json"         json:"json"`         // 配置:key=名称,value=值                                    
    Price        float64     `orm:"price"        json:"price"`        // 价格                                                      
    Views        uint        `orm:"views"        json:"views"`        // 点击                                                      
    Startdate    *gtime.Time `orm:"startdate"    json:"startdate"`    // 开始日期                                                  
    Activitytime *gtime.Time `orm:"activitytime" json:"activitytime"` // 活动时间(datetime)                                        
    Year         string      `orm:"year"         json:"year"`         // 年                                                        
    Times        *gtime.Time `orm:"times"        json:"times"`        // 时间                                                      
    Refreshtime  int         `orm:"refreshtime"  json:"refreshtime"`  // 刷新时间(int)                                             
    Createtime   int         `orm:"createtime"   json:"createtime"`   // 创建时间                                                  
    Updatetime   int         `orm:"updatetime"   json:"updatetime"`   // 更新时间                                                  
    Deletetime   int         `orm:"deletetime"   json:"deletetime"`   // 删除时间                                                  
    Weigh        int         `orm:"weigh"        json:"weigh"`        // 权重                                                      
    Switch       int         `orm:"switch"       json:"switch"`       // 开关                                                      
    Status       string      `orm:"status"       json:"status"`       // 状态                                                      
    State        string      `orm:"state"        json:"state"`        // 状态值:0=禁用,1=正常,2=推荐                               
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}