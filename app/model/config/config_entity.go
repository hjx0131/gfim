// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package config

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table gf_config.
type Entity struct {
    Id      uint   `orm:"id,primary"  json:"id"`      //                                                     
    Name    string `orm:"name,unique" json:"name"`    // 变量名                                              
    Group   string `orm:"group"       json:"group"`   // 分组                                                
    Title   string `orm:"title"       json:"title"`   // 变量标题                                            
    Tip     string `orm:"tip"         json:"tip"`     // 变量描述                                            
    Type    string `orm:"type"        json:"type"`    // 类型:string,text,int,bool,array,datetime,date,file  
    Value   string `orm:"value"       json:"value"`   // 变量值                                              
    Content string `orm:"content"     json:"content"` // 变量字典数据                                        
    Rule    string `orm:"rule"        json:"rule"`    // 验证规则                                            
    Extend  string `orm:"extend"      json:"extend"`  // 扩展属性                                            
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}