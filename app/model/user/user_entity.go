// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table gf_user.
type Entity struct {
    Id             uint        `orm:"id,primary"     json:"id"`             // ID                
    GroupId        uint        `orm:"group_id"       json:"group_id"`       // 组别ID            
    Username       string      `orm:"username"       json:"username"`       // 用户名            
    Nickname       string      `orm:"nickname"       json:"nickname"`       // 昵称              
    Password       string      `orm:"password"       json:"password"`       // 密码              
    Salt           string      `orm:"salt"           json:"salt"`           // 密码盐            
    Email          string      `orm:"email"          json:"email"`          // 电子邮箱          
    Mobile         string      `orm:"mobile"         json:"mobile"`         // 手机号            
    Avatar         string      `orm:"avatar"         json:"avatar"`         // 头像              
    Level          uint        `orm:"level"          json:"level"`          // 等级              
    Gender         uint        `orm:"gender"         json:"gender"`         // 性别              
    Birthday       *gtime.Time `orm:"birthday"       json:"birthday"`       // 生日              
    Bio            string      `orm:"bio"            json:"bio"`            // 格言              
    Money          float64     `orm:"money"          json:"money"`          // 余额              
    Score          uint        `orm:"score"          json:"score"`          // 积分              
    Successions    uint        `orm:"successions"    json:"successions"`    // 连续登录天数      
    Maxsuccessions uint        `orm:"maxsuccessions" json:"maxsuccessions"` // 最大连续登录天数  
    Prevtime       int         `orm:"prevtime"       json:"prevtime"`       // 上次登录时间      
    Logintime      int         `orm:"logintime"      json:"logintime"`      // 登录时间          
    Loginip        string      `orm:"loginip"        json:"loginip"`        // 登录IP            
    Loginfailure   uint        `orm:"loginfailure"   json:"loginfailure"`   // 失败次数          
    Joinip         string      `orm:"joinip"         json:"joinip"`         // 加入IP            
    Jointime       int         `orm:"jointime"       json:"jointime"`       // 加入时间          
    Createtime     int         `orm:"createtime"     json:"createtime"`     // 创建时间          
    Updatetime     int         `orm:"updatetime"     json:"updatetime"`     // 更新时间          
    Token          string      `orm:"token"          json:"token"`          // Token             
    Status         string      `orm:"status"         json:"status"`         // 状态              
    Verification   string      `orm:"verification"   json:"verification"`   // 验证              
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}