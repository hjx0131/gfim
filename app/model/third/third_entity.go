// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package third

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table gf_third.
type Entity struct {
    Id           uint   `orm:"id,primary"    json:"id"`            // ID              
    UserId       uint   `orm:"user_id"       json:"user_id"`       // 会员ID          
    Platform     string `orm:"platform"      json:"platform"`      // 第三方应用      
    Openid       string `orm:"openid"        json:"openid"`        // 第三方唯一ID    
    Openname     string `orm:"openname"      json:"openname"`      // 第三方会员昵称  
    AccessToken  string `orm:"access_token"  json:"access_token"`  // AccessToken     
    RefreshToken string `orm:"refresh_token" json:"refresh_token"` //                 
    ExpiresIn    uint   `orm:"expires_in"    json:"expires_in"`    // 有效期          
    Createtime   uint   `orm:"createtime"    json:"createtime"`    // 创建时间        
    Updatetime   uint   `orm:"updatetime"    json:"updatetime"`    // 更新时间        
    Logintime    uint   `orm:"logintime"     json:"logintime"`     // 登录时间        
    Expiretime   uint   `orm:"expiretime"    json:"expiretime"`    // 过期时间        
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}