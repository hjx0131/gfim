// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package attachment

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table gf_attachment.
type Entity struct {
    Id          uint   `orm:"id,primary"  json:"id"`          // ID             
    AdminId     uint   `orm:"admin_id"    json:"admin_id"`    // 管理员ID       
    UserId      uint   `orm:"user_id"     json:"user_id"`     // 会员ID         
    Url         string `orm:"url"         json:"url"`         // 物理路径       
    Imagewidth  string `orm:"imagewidth"  json:"imagewidth"`  // 宽度           
    Imageheight string `orm:"imageheight" json:"imageheight"` // 高度           
    Imagetype   string `orm:"imagetype"   json:"imagetype"`   // 图片类型       
    Imageframes uint   `orm:"imageframes" json:"imageframes"` // 图片帧数       
    Filesize    uint   `orm:"filesize"    json:"filesize"`    // 文件大小       
    Mimetype    string `orm:"mimetype"    json:"mimetype"`    // mime类型       
    Extparam    string `orm:"extparam"    json:"extparam"`    // 透传数据       
    Createtime  int    `orm:"createtime"  json:"createtime"`  // 创建日期       
    Updatetime  int    `orm:"updatetime"  json:"updatetime"`  // 更新时间       
    Uploadtime  int    `orm:"uploadtime"  json:"uploadtime"`  // 上传时间       
    Storage     string `orm:"storage"     json:"storage"`     // 存储位置       
    Sha1        string `orm:"sha1"        json:"sha_1"`       // 文件 sha1编码  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}